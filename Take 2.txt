






-	I like Go.
-	Invariably you want to deal with some frontend tech. Pulls you into HTML/CSS/JS.


-	Benefits of isomorphism.
	-	Consistency.
	-	Familiar tooling.


-	Why I like Go.
	-	Reusability.
	-	Refactorability.
	-	(Blocking code instead of callbacks, rich stdlib, great concurrency, explicitness.)

-	GopherJS history
	-	Slide to demonstrate the maturity of the project.

-	"Cgo is not Go."
	-	Similarly, JavaScript is not Go. But you can work around it via wrappers, create nice high level APIs.

-	io.Reader and io.Writer
	-	Go over impl of ivy's io.go.

?	net/http.Client and XHR?

?	Fetch API streaming?

?

-	Generating HTML.
	-	fmt.Fprintf()
	-	html/template
	-	React-style Render method in Go.
		-	Promising, but needs work.
			-	Currently using golang.org/x/net/html package simply because it's familiar, good. Need to write a more dedicated one, friendly towards generation of HTML.

?	Services defined as Go interfaces.
	?

